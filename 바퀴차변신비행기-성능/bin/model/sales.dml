insert into t_party values(1, 'Dream Company', 1000);
insert into t_party values(2, 'Lotte', 2000);
insert into t_party values(3, 'Hette', 1000);
insert into t_party values(4, '홍길동', 100000);
insert into t_party values(5, '이순신', 50000);
--update t_party set balance = balance - 67000 where id = 4;

insert into t_product values(1, 2, '초코파이', 500, 5000);
insert into t_product values(2, 2, '빼빼로', 1500, 2000);
insert into t_product values(3, 3, '브라보콘', 1000, 10000);

insert into t_trade(id, buyer_id) values(1, 4);
insert into t_trade(id, buyer_id) values(2, 5);
insert into t_trade(id, buyer_id) values(3, 5);
insert into t_trade(id, buyer_id) values(4, 5);
insert into t_trade(id, buyer_id) values(5, 5);
insert into t_trade(id, buyer_id) values(6, 5);
insert into t_trade(id, buyer_id) values(7, 5);
insert into t_trade(id, buyer_id) values(8, 5);
insert into t_trade(id, buyer_id) values(9, 5);
insert into t_trade(id, buyer_id) values(10, 5);

insert into t_detail values(1, 1, 100); -- 50000
insert into t_detail values(1, 2, 10);  -- 15000
insert into t_detail values(1, 3, 2);  -- 2000  > 합계 67000원

insert into t_detail values(2, 2, 3); --  4500
insert into t_detail values(2, 3, 5);  -- 5000

insert into t_detail values(3, 1, 100); 
insert into t_detail values(3, 2, 10);  
insert into t_detail values(3, 3, 2);  

insert into t_detail values(4, 1, 100);
insert into t_detail values(4, 2, 10); 
insert into t_detail values(4, 3, 2);  

insert into t_detail values(5, 1, 100);
insert into t_detail values(5, 2, 10); 
insert into t_detail values(5, 3, 2);  

insert into t_detail values(6, 1, 100);
insert into t_detail values(6, 2, 10); 
insert into t_detail values(6, 3, 2);  

insert into t_detail values(7, 1, 100);
insert into t_detail values(7, 2, 10); 
insert into t_detail values(7, 3, 2);  

insert into t_detail values(8, 1, 100);
insert into t_detail values(8, 2, 10); 
insert into t_detail values(8, 3, 2);  

insert into t_detail values(9, 1, 100);
insert into t_detail values(9, 2, 10); 
insert into t_detail values(9, 3, 2);  

insert into t_detail values(10, 1, 100);
insert into t_detail values(10, 2, 10); 
insert into t_detail values(10, 3, 2);  


--정산업무
--홍길동이가 장바구니에 담은 상품별 수량을 바탕으로
--총 거래 금액을 산출하고
--상품별 거래 금액의 판매시별 합산 금액에서
--우리 Dream Company가 먹을 10% 금액을 차감하여
--각 판매사별 잔고금액을 올려라 또한 재고 잔고에서 각 차감하라 
--또한 10%의 커미션 금액을 Dream Company 잔고에 올리고
--홍길동이의 잔고에서는 총 거래 금액을 차감하시오.

--홍길동 거래 내역을 거래, 상세, 상품으로 연결하여 봅시다.
select	*
  from  t_trade t, t_detail d, t_product p
 where	t.buyer_id = 4						--구매자 홍길동
   and	t.id = d.trade_id					--trade와 detail 연결
   and  d.product_id = p.id;				--product와 detail 연결
   
--홍길동 거래내역에서 각 상품별 거래 금액
select	d.count * p.unitprice
  from  t_trade t, t_detail d, t_product p
 where	t.buyer_id = 4						-- 구매자 홍길동
   and	t.id = d.trade_id					-- trade와 detail 연결
   and  d.product_id = p.id;    			-- product와 detail 연결
   
--홍길동 거래내역에서 총 거래금액
select t.buyer_id, -sum(d.count * p.unitprice) 			-- sum 합계
  from t_trade t, t_detail d, t_product p
 where t.buyer_id = 4						-- 구매자 홍길동
   and t.id = d.trade_id					-- trade와 detail 연결
   and d.product_id = p.id;   				-- product와 detail 연결
 
-- 합산 금액에서 우리 Dream Company가 먹을 10% 금액
select 1, -(ta.amt * 0.1)
from (select t.buyer_id, -sum(d.count * p.unitprice) amt
  from t_trade t, t_detail d, t_product p
 where t.buyer_id = 4						-- 구매자 홍길동
   and t.id = d.trade_id					-- trade와 detail 연결
   and d.product_id = p.id   				-- product와 detail 연결 
 group by t.buyer_id) ta;
 
-- 각 판매사별 매출액\
select s.id, sum(d.count * p.unitprice) * 0.9
  from t_trade t, t_detail d, t_product p, t_party s
 where t.buyer_id = 4						-- 구매자 홍길동
   and t.id = d.trade_id					-- trade와 detail 연결
   and d.product_id = p.id   				-- product와 detail 연결
   and p.seller = s.id
 group by s.id; 
 
 ------------------------------------------
-- 각 행위자 별 변경할 금액을 모두 조회하시오.
--------------------------------------------
select t.buyer_id, -sum(d.count * p.unitprice)   -- 구매자 홍길동의 합계값
  from t_trade t, t_detail d, t_product p
 where t.buyer_id = 4						-- 구매자 홍길동
   and t.id = d.trade_id					-- trade와 detail 연결
   and d.product_id = p.id   				-- product와 detail 연결
 group by t.buyer_id
union
select 1, -(ta.amt * 0.1)					-- 구매자의 합계값 = 판매자의 수익이므로 수익의 0.1%는 Dream에서 꿀꺽
from (select t.buyer_id, -sum(d.count * p.unitprice) amt
  from t_trade t, t_detail d, t_product p
 where t.buyer_id = 4						-- 구매자 홍길동
   and t.id = d.trade_id					-- trade와 detail 연결
   and d.product_id = p.id   				-- product와 detail 연결 
 group by t.buyer_id) ta
union 
select s.id, sum(d.count * p.unitprice) * 0.9  -- 10%를 제외한 판매자들의 수익을 나타냄.  	
  from t_trade t, t_detail d, t_product p, t_party s
 where t.buyer_id = 4						-- 구매자 홍길동
   and t.id = d.trade_id					-- trade와 detail 연결
   and d.product_id = p.id   				-- product와 detail 연결
   and p.seller = s.id						-- product와 party 연결
 group by s.id; 
 
 ------------------------------------------
--View를 사용하여 각 행위자 별 변경할 금액을 모두 조회 sql을 간략하게 표현해 봅시다.
-------------------------------------------- 
select bid, -sum(amt) amt  -- 구매자 홍길동의 합계값
  from v_amt_per_product
 where id = 1
 group by bid
union
select 1, -(ta.amt * 0.1)		
from (select bid, -sum(amt) amt 
        from v_amt_per_product
       where id = 1
       group by bid) ta
union  
select s.id, sum(a.amt) * 0.9  	
  from v_amt_per_product a, t_product p, t_party s
 where a.id = 1	
   and a.pid = p.id	
   and p.seller = s.id
 group by s.id; 
 
-- 상기 조회 결과를 바탕으로 각 행위자의 잔고 금액을 조정하시오
MERGE INTO 
      t_party y
      USING (select bid, -sum(amt) amt  
               from v_amt_per_product
              where id = 1
              group by bid
              union
             select 1, -(ta.amt * 0.1)		
               from (select bid, -sum(amt) amt 
                       from v_amt_per_product
                      where id = 1
                      group by bid) ta
              union  
             select s.id, sum(a.amt) * 0.9  	
               from v_amt_per_product a, t_product p, t_party s
              where a.id = 1	
                and a.pid = p.id	
                and p.seller = s.id
              group by s.id) e
         ON (y.id = e.bid)
       WHEN MATCHED THEN
            UPDATE SET y.balance = y.balance + e.amt;
select * from t_party                            



--홍길동 잔고에서 거래 총 금액을 차감하시오. (In Line 방식)
update t_party set balance = balance - ( 		-- update
	select	sum(d.count * p.unitprice)
	  from  t_trade t, t_detail d, t_product p
	 where	t.buyer_id = 4
	   and	t.id = d.trade_id
	   and  d.product_id = p.id
) where id = 4;

--update + select
UPDATE t_party y
    SET y.balance = y.balance + (
select	-sum(d.count * p.unitprice)
  from  t_trade t, t_detail d, t_product p
 where	t.buyer_id = 4
   and	t.id = d.trade_id
   and  d.product_id = p.id
   and  t.buyer_id = y.id
 );   
 

UPDATE t_party y 
   SET y.balace = y.balace + (
select -sum(d.count * p.unitprice) 
  from t_trade t, t_detail d, t_product p
 where t.buyer_id = 4
   and t.id = d.trade_id
   and d.product_id = p.id
   and  t.buyer_id = y.id
 )


 
