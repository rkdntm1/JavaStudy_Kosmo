객체지향 - 실제세계를 모델링하여 소프트웨어를 개발
ㄴ 주어진 문제 시스템의 구성 요소를(시스템) 찾아서 Class로 정의하고 해당 객체를 만들어
    객체가 가지고 있는 정보와 연결되어 있는 객체에게 기능을 위임하여 전체 목표를 이룬다.(by teacher)
객체 - 상태(정보 state 필드), 동작(기능 behavior 메소드)
객체는 메시지를 통해 다른 객체와 상호작용

객체지향 3대 특징 
캡슐화: 정보은닉(information hiding)  - 내부를 보호 (실제 구현 내용을 외부에는 감춤)
          LOC (변경 국부성)
          -> 품질이 좋다 . 업그레이드가 쉽다.
상속   : 프로젝트초반)
            재사용(이미 작성 된 클래스를 이어받음) -> 공통화, 일반화
            Bottom up 방향
          프로젝트후반) 
            특수화(specialization)
             Top dodwn 방향
다형성: 각 클래스의 특성별로 움직이도록 만들기

추상화 : 필요한것만 남겨놓기


객체 지향 장점
재사용쉽다, 업그레이드쉽다, 디버깅쉽다 - 유지보수성
================================================
클래스 : 개념 / 인스턴스 : 실체
 
 메소드 : 프리미티브타입은 부수효과 없음 / 참조타입는 부수효과가 있음(call by ref) 
            -> 부수효과가 없는게 더 좋음
메소드 구조 = 시그니처 (signature) -> 가시 반환 이름 파라미터 예외 
int add (int x, int y)  

--------------
인수(argument) - 메소드호출시 전달하는값
매개변수(parameter) - 메소드에서 값을 받을 때 사용하는 변수
=====================
가시성 표시자
public
private
protected
Derived 유도된 - 지름길(성능)
package

-------------------------------------
view control model